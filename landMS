{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8376322,"sourceType":"datasetVersion","datasetId":4980550}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport zipfile\nimport requests\nimport os\nimport io\nimport cv2\nimport shutil\nfrom PIL import Image\nimport tensorflow as tf\nfrom skimage.transform import resize\nfrom tensorflow import keras\nfrom keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten,Conv2D , MaxPooling2D\nfrom tensorflow.keras.callbacks import TensorBoard\nfrom tensorflow.keras.losses import CategoricalCrossentropy\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.utils import plot_model\nimport time\nimport rasterio\nfrom rasterio.plot import show, show_hist,  reshape_as_image\n","metadata":{"execution":{"iopub.status.busy":"2024-05-11T11:32:07.057610Z","iopub.execute_input":"2024-05-11T11:32:07.058451Z","iopub.status.idle":"2024-05-11T11:32:20.040702Z","shell.execute_reply.started":"2024-05-11T11:32:07.058416Z","shell.execute_reply":"2024-05-11T11:32:20.039898Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-05-11 11:32:08.819417: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-11 11:32:08.819500: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-11 11:32:08.960048: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"labels = {\n    'AnnualCrop': 0,\n    'Forest': 1,\n    'HerbaceousVegetation': 2,\n    'Highway': 3,\n    'Industrial': 4,\n    'Pasture': 5,\n    'PermanentCrop': 6,\n    'Residential': 7,\n    'River': 8,\n    'SeaLake': 9,\n}","metadata":{"execution":{"iopub.status.busy":"2024-05-11T11:32:29.595583Z","iopub.execute_input":"2024-05-11T11:32:29.596711Z","iopub.status.idle":"2024-05-11T11:32:29.601529Z","shell.execute_reply.started":"2024-05-11T11:32:29.596679Z","shell.execute_reply":"2024-05-11T11:32:29.600609Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"src_path = '/kaggle/input/eurosatms/EuroSatMS'\n\ndata = []\n\nsubclass = sorted(os.listdir(src_path))\n\ndef create_data():\n    for sclass in subclass:\n        path = os.path.join(src_path, sclass)\n        class_num = subclass.index(sclass)\n        for img in tqdm(os.listdir(path)):\n            img_path = os.path.join(path, img)\n            with rasterio.open(img_path) as src:\n                img_array = src.read()\n                img_resized = resize(img_array, (13, 64, 64), mode='reflect', anti_aliasing=True)\n                data.append([img_resized, class_num])\n\ncreate_data()\n\nprint(\"Total samples in the dataset:\", len(data))\n","metadata":{"execution":{"iopub.status.busy":"2024-05-11T11:32:33.344699Z","iopub.execute_input":"2024-05-11T11:32:33.345476Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"100%|██████████| 2500/2500 [00:43<00:00, 56.94it/s]\n100%|██████████| 2500/2500 [00:44<00:00, 56.65it/s]\n100%|██████████| 2500/2500 [00:36<00:00, 69.31it/s]\n100%|██████████| 2000/2000 [00:34<00:00, 58.14it/s]\n100%|██████████| 2000/2000 [00:33<00:00, 59.25it/s]\n100%|██████████| 1500/1500 [00:25<00:00, 59.19it/s]\n100%|██████████| 2000/2000 [00:32<00:00, 60.69it/s]\n100%|██████████| 2500/2500 [00:41<00:00, 59.91it/s]\n100%|██████████| 2000/2000 [00:34<00:00, 58.26it/s]\n 85%|████████▍ | 2121/2500 [00:35<00:06, 58.53it/s]","output_type":"stream"}]},{"cell_type":"code","source":"X = []\ny = []\n\nfor features, label in data:\n    X.append(features)\n    y.append(label)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclass MyDataGenerator(keras.utils.Sequence):\n    def __init__(self, X, y, batch_size):\n        self.X = X\n        self.y = y\n        self.batch_size = batch_size\n        self.num_samples = len(X)\n\n    def __len__(self):\n        return int(np.ceil(self.num_samples / self.batch_size))\n\n    def __getitem__(self, index):\n        start = index * self.batch_size\n        end = min((index + 1) * self.batch_size, self.num_samples)\n\n        batch_X = self.X[start:end]\n        batch_y = self.y[start:end]\n\n        batch_X = np.array(batch_X).reshape(-1,64, 64, 13) / 255.0\n        batch_y = np.array(batch_y)\n\n        return batch_X, batch_y\n\nbatch_size = 32\ntrain_generator = MyDataGenerator(X_train, y_train, batch_size)\ntest_generator = MyDataGenerator(X_test, y_test, batch_size)","metadata":{"execution":{"iopub.status.busy":"2024-05-10T14:33:08.292335Z","iopub.execute_input":"2024-05-10T14:33:08.293016Z","iopub.status.idle":"2024-05-10T14:33:08.324094Z","shell.execute_reply.started":"2024-05-10T14:33:08.292982Z","shell.execute_reply":"2024-05-10T14:33:08.323335Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"NAME=\"MS105\"\n\nmodel=Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3),  activation='relu',  input_shape=(64, 64, 13)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(256, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\ntensorboard= TensorBoard(log_dir=\"logs\\{}\".format(NAME))\n\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n              metrics=['accuracy'])\n\n\nhistory = model.fit(train_generator, epochs=100,batch_size=32, validation_data=test_generator,callbacks=[tensorboard])","metadata":{"execution":{"iopub.status.busy":"2024-05-10T14:33:34.321678Z","iopub.execute_input":"2024-05-10T14:33:34.322043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Plot Model Loss\nplt.subplot(211)\nplt.title('Model Loss')\nplt.plot(history.history['loss'], color='blue', label='train')\nplt.plot(history.history['val_loss'], color='green', label='test')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['Training','Validation'],loc='upper right')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Plot Accuracy\nplt.subplot(211)\nplt.title('Model Accuracy')\nplt.plot(history.history['accuracy'], color='blue', label='train')\nplt.plot(history.history['val_accuracy'], color='green', label='test')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['Training','Validation'],loc='lower right')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"save_path = 'MS105.h5'\nmodel.save(save_path)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Testing predictions on model\nfrom tensorflow.keras.preprocessing import image\n\nlabels = [\"AnnualCrop\", \"Forest\", \"HerbaceousVegetation\", \"Highway\", \"Industrial\", \"Pasture\", \"PermanentCrop\", \"Residential\", \"River\", \"SeaLake\"]\n\n\ndef preprocess_image(image_path):\n    img = image.load_img(image_path, target_size=(64,64,13))\n    img_array = image.img_to_array(img)\n    img_array = img_array/ 255.0\n    img_array = np.expand_dims(img_array, axis=0)\n    return img_array\n\npath = \"\"\nimg = preprocess_image(path)\n\n\npredictions = model.predict(img)\npredicted_class_index = np.argmax(predictions)\n\nprint(predictions)\npredicted_class = labels[predicted_class_index]\n\nprint(\"Predicted class:\", predicted_class)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Predict the test set\ny_pred = model.predict(test_generator)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\n# Create a confusion matrix\ncm = confusion_matrix(y_test, y_pred_classes)\nsns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=labels, yticklabels=labels)\nplt.xlabel(\"Predicted Class\")\nplt.ylabel(\"True Class\")\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{},"execution_count":null,"outputs":[]}]}